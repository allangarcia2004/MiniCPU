// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2022 16:45:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] MEM_CONTENTS;
reg [3:0] REG_1;
reg [3:0] REG_2;
// wires                                               
wire [1:0] IN;
wire [1:0] INN;
wire [1:0] JMP;
wire [1:0] JMPN;
wire PC_CLRN;
wire [3:0] PC_D;
wire PC_LOAD;
wire REG_1_CLRN;
wire REG_1_LOAD;
wire REG_2_CLRN;
wire REG_2_LOAD;
wire [1:0] TO;
wire [1:0] TON;
wire [1:0] ULA_Op;
wire [3:0] ULA_OPERAND;
wire [3:0] ULA_REGISTER;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.IN(IN),
	.INN(INN),
	.JMP(JMP),
	.JMPN(JMPN),
	.MEM_CONTENTS(MEM_CONTENTS),
	.PC_CLRN(PC_CLRN),
	.PC_D(PC_D),
	.PC_LOAD(PC_LOAD),
	.REG_1(REG_1),
	.REG_1_CLRN(REG_1_CLRN),
	.REG_1_LOAD(REG_1_LOAD),
	.REG_2(REG_2),
	.REG_2_CLRN(REG_2_CLRN),
	.REG_2_LOAD(REG_2_LOAD),
	.TO(TO),
	.TON(TON),
	.ULA_Op(ULA_Op),
	.ULA_OPERAND(ULA_OPERAND),
	.ULA_REGISTER(ULA_REGISTER)
);
initial 
begin 
#1000000 $finish;
end 
// MEM_CONTENTS[ 15 ]
initial
begin
	MEM_CONTENTS[15] = 1'b0;
end 
// MEM_CONTENTS[ 14 ]
initial
begin
	MEM_CONTENTS[14] = 1'b1;
end 
// MEM_CONTENTS[ 13 ]
initial
begin
	MEM_CONTENTS[13] = 1'b1;
end 
// MEM_CONTENTS[ 12 ]
initial
begin
	MEM_CONTENTS[12] = 1'b0;
end 
// MEM_CONTENTS[ 11 ]
initial
begin
	MEM_CONTENTS[11] = 1'b0;
end 
// MEM_CONTENTS[ 10 ]
initial
begin
	MEM_CONTENTS[10] = 1'b0;
end 
// MEM_CONTENTS[ 9 ]
initial
begin
	MEM_CONTENTS[9] = 1'b0;
end 
// MEM_CONTENTS[ 8 ]
initial
begin
	MEM_CONTENTS[8] = 1'b0;
end 
// MEM_CONTENTS[ 7 ]
initial
begin
	MEM_CONTENTS[7] = 1'b0;
end 
// MEM_CONTENTS[ 6 ]
initial
begin
	MEM_CONTENTS[6] = 1'b0;
end 
// MEM_CONTENTS[ 5 ]
initial
begin
	MEM_CONTENTS[5] = 1'b0;
end 
// MEM_CONTENTS[ 4 ]
initial
begin
	MEM_CONTENTS[4] = 1'b0;
end 
// MEM_CONTENTS[ 3 ]
initial
begin
	MEM_CONTENTS[3] = 1'b0;
end 
// MEM_CONTENTS[ 2 ]
initial
begin
	MEM_CONTENTS[2] = 1'b1;
end 
// MEM_CONTENTS[ 1 ]
initial
begin
	MEM_CONTENTS[1] = 1'b0;
end 
// MEM_CONTENTS[ 0 ]
initial
begin
	MEM_CONTENTS[0] = 1'b1;
end 
// REG_1[ 3 ]
initial
begin
	REG_1[3] = 1'b0;
end 
// REG_1[ 2 ]
initial
begin
	REG_1[2] = 1'b1;
end 
// REG_1[ 1 ]
initial
begin
	REG_1[1] = 1'b1;
end 
// REG_1[ 0 ]
initial
begin
	REG_1[0] = 1'b0;
end 
// REG_2[ 3 ]
initial
begin
	REG_2[3] = 1'b1;
end 
// REG_2[ 2 ]
initial
begin
	REG_2[2] = 1'b0;
end 
// REG_2[ 1 ]
initial
begin
	REG_2[1] = 1'b1;
end 
// REG_2[ 0 ]
initial
begin
	REG_2[0] = 1'b0;
end 
endmodule

