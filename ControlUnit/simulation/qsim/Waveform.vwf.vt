// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/04/2022 16:08:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] MEM_CONTENTS;
reg [3:0] REG_1;
reg [3:0] REG_2;
// wires                                               
wire [1:0] J;
wire [1:0] JN;
wire PC_CLRN;
wire PC_LOAD;
wire REG_1_CLRN;
wire REG_1_EN;
wire REG_1_LOAD;
wire REG_2_CLRN;
wire REG_2_EN;
wire REG_2_LOAD;
wire ULA_A;
wire ULA_B;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.J(J),
	.JN(JN),
	.MEM_CONTENTS(MEM_CONTENTS),
	.PC_CLRN(PC_CLRN),
	.PC_LOAD(PC_LOAD),
	.REG_1(REG_1),
	.REG_1_CLRN(REG_1_CLRN),
	.REG_1_EN(REG_1_EN),
	.REG_1_LOAD(REG_1_LOAD),
	.REG_2(REG_2),
	.REG_2_CLRN(REG_2_CLRN),
	.REG_2_EN(REG_2_EN),
	.REG_2_LOAD(REG_2_LOAD),
	.ULA_A(ULA_A),
	.ULA_B(ULA_B)
);
initial 
begin 
#1000000 $finish;
end 

// MEM_CONTENTS[10]
always
begin
	MEM_CONTENTS[10] = 1'b0;
	MEM_CONTENTS[10] = #5000 1'b1;
	#5000;
end 

// MEM_CONTENTS[11]
always
begin
	MEM_CONTENTS[11] = 1'b0;
	MEM_CONTENTS[11] = #10000 1'b1;
	#10000;
end 
endmodule

