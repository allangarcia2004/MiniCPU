// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2022 15:41:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MiniCPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MiniCPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_FPGA;
reg CLRN_GLOBAL;
reg INPUT_CLK;
reg RST_DEBOUNCER;
// wires                                               
wire [15:0] MEMORY;
wire [6:0] MEMORY_LED_0;
wire [6:0] MEMORY_LED_1;
wire [6:0] MEMORY_LED_2;
wire [6:0] MEMORY_LED_3;
wire PC_CLRN;
wire PC_LOAD;
wire [7:0] PC_OUT;
wire [6:0] R1_LED;
wire R1_LOAD;
wire [3:0] R1_OUT;
wire [6:0] R2_LED;
wire R2_LOAD;
wire [3:0] R2_OUT;
wire R_CLRN;
wire [3:0] ULA_REGISTER;

// assign statements (if any)                          
MiniCPU i1 (
// port map - connection between master ports and signals/registers   
	.CLK_FPGA(CLK_FPGA),
	.CLRN_GLOBAL(CLRN_GLOBAL),
	.INPUT_CLK(INPUT_CLK),
	.MEMORY(MEMORY),
	.MEMORY_LED_0(MEMORY_LED_0),
	.MEMORY_LED_1(MEMORY_LED_1),
	.MEMORY_LED_2(MEMORY_LED_2),
	.MEMORY_LED_3(MEMORY_LED_3),
	.PC_CLRN(PC_CLRN),
	.PC_LOAD(PC_LOAD),
	.PC_OUT(PC_OUT),
	.R1_LED(R1_LED),
	.R1_LOAD(R1_LOAD),
	.R1_OUT(R1_OUT),
	.R2_LED(R2_LED),
	.R2_LOAD(R2_LOAD),
	.R2_OUT(R2_OUT),
	.R_CLRN(R_CLRN),
	.RST_DEBOUNCER(RST_DEBOUNCER),
	.ULA_REGISTER(ULA_REGISTER)
);
initial 
begin 
#1000000 $finish;
end 

// CLK_FPGA
initial
begin
	CLK_FPGA = 1'b0;
end 

// CLRN_GLOBAL
initial
begin
	CLRN_GLOBAL = 1'b0;
	CLRN_GLOBAL = #20000 1'b1;
end 

// INPUT_CLK
initial
begin
	repeat(33)
	begin
		INPUT_CLK = 1'b0;
		INPUT_CLK = #15000 1'b1;
		# 15000;
	end
	INPUT_CLK = 1'b0;
end 

// RST_DEBOUNCER
initial
begin
	RST_DEBOUNCER = 1'b0;
end 
endmodule

