// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2022 15:15:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MiniCPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MiniCPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_FPGA;
reg CLR_GLOBAL;
reg INPUT_CLK;
reg RST_DEBOUNCER;
// wires                                               
wire [7:0] COUNTER;
wire [15:0] MEM_CONTENTS;
wire [6:0] MEM_OUT_0;
wire [6:0] MEM_OUT_1;
wire [6:0] MEM_OUT_2;
wire [6:0] MEM_OUT_3;
wire PC_CLRN;
wire [3:0] PC_D;
wire PC_LOAD;
wire [3:0] R1;
wire R1_CLRN;
wire R1_LOAD;
wire [6:0] R1_OUT;
wire [3:0] R2;
wire R2_CLRN;
wire R2_LOAD;
wire [6:0] R2_OUT;
wire [1:0] ULA_Op;
wire [3:0] ULA_OPERAND;
wire [3:0] ULA_REGISTER;
wire [3:0] ULA_S;

// assign statements (if any)                          
MiniCPU i1 (
// port map - connection between master ports and signals/registers   
	.CLK_FPGA(CLK_FPGA),
	.CLR_GLOBAL(CLR_GLOBAL),
	.COUNTER(COUNTER),
	.INPUT_CLK(INPUT_CLK),
	.MEM_CONTENTS(MEM_CONTENTS),
	.MEM_OUT_0(MEM_OUT_0),
	.MEM_OUT_1(MEM_OUT_1),
	.MEM_OUT_2(MEM_OUT_2),
	.MEM_OUT_3(MEM_OUT_3),
	.PC_CLRN(PC_CLRN),
	.PC_D(PC_D),
	.PC_LOAD(PC_LOAD),
	.R1(R1),
	.R1_CLRN(R1_CLRN),
	.R1_LOAD(R1_LOAD),
	.R1_OUT(R1_OUT),
	.R2(R2),
	.R2_CLRN(R2_CLRN),
	.R2_LOAD(R2_LOAD),
	.R2_OUT(R2_OUT),
	.RST_DEBOUNCER(RST_DEBOUNCER),
	.ULA_Op(ULA_Op),
	.ULA_OPERAND(ULA_OPERAND),
	.ULA_REGISTER(ULA_REGISTER),
	.ULA_S(ULA_S)
);
initial 
begin 
#1000000 $finish;
end 

// CLR_GLOBAL
initial
begin
	CLR_GLOBAL = 1'b0;
	CLR_GLOBAL = #30000 1'b1;
end 

// INPUT_CLK
initial
begin
	INPUT_CLK = 1'b0;
	INPUT_CLK = #20000 1'b1;
	# 30000;
	repeat(15)
	begin
		INPUT_CLK = 1'b0;
		INPUT_CLK = #30000 1'b1;
		# 30000;
	end
	INPUT_CLK = 1'b0;
	INPUT_CLK = #30000 1'b1;
end 

// RST_DEBOUNCER
initial
begin
	RST_DEBOUNCER = 1'b0;
end 
endmodule

