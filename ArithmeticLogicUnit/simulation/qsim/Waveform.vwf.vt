// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2022 15:08:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ArithmeticLogicUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ArithmeticLogicUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] Op;
reg [3:0] OPERAND;
reg [3:0] REGISTER;
// wires                                               
wire [3:0] S;

// assign statements (if any)                          
ArithmeticLogicUnit i1 (
// port map - connection between master ports and signals/registers   
	.Op(Op),
	.OPERAND(OPERAND),
	.REGISTER(REGISTER),
	.S(S)
);
initial 
begin 
#240000 $finish;
end 
// Op[ 1 ]
initial
begin
	Op[1] = 1'b0;
	Op[1] = #40000 1'b1;
	Op[1] = #40000 1'b0;
	Op[1] = #40000 1'b1;
	Op[1] = #40000 1'b0;
	Op[1] = #40000 1'b1;
end 
// Op[ 0 ]
initial
begin
	repeat(3)
	begin
		Op[0] = 1'b0;
		Op[0] = #20000 1'b1;
		# 20000;
	end
	Op[0] = 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #20000 1'b1;
	Op[0] = #20000 1'b0;
	Op[0] = #20000 1'b1;
end 
// REGISTER[ 3 ]
initial
begin
	REGISTER[3] = 1'b0;
	REGISTER[3] = #200000 1'b1;
	REGISTER[3] = #20000 1'b0;
end 
// REGISTER[ 2 ]
initial
begin
	REGISTER[2] = 1'b0;
	REGISTER[2] = #80000 1'b1;
	REGISTER[2] = #80000 1'b0;
end 
// REGISTER[ 1 ]
initial
begin
	REGISTER[1] = 1'b0;
	REGISTER[1] = #80000 1'b1;
	REGISTER[1] = #80000 1'b0;
end 
// REGISTER[ 0 ]
initial
begin
	REGISTER[0] = 1'b0;
	REGISTER[0] = #80000 1'b1;
	REGISTER[0] = #100000 1'b0;
	REGISTER[0] = #20000 1'b1;
	REGISTER[0] = #20000 1'b0;
end 
// OPERAND[ 3 ]
initial
begin
	OPERAND[3] = 1'b0;
	OPERAND[3] = #220000 1'b1;
end 
// OPERAND[ 2 ]
initial
begin
	OPERAND[2] = 1'b0;
	OPERAND[2] = #80000 1'b1;
	OPERAND[2] = #80000 1'b0;
	OPERAND[2] = #40000 1'b1;
	OPERAND[2] = #20000 1'b0;
end 
// OPERAND[ 1 ]
initial
begin
	OPERAND[1] = 1'b0;
	OPERAND[1] = #160000 1'b1;
	OPERAND[1] = #60000 1'b0;
end 
// OPERAND[ 0 ]
initial
begin
	OPERAND[0] = 1'b0;
	OPERAND[0] = #80000 1'b1;
	OPERAND[0] = #80000 1'b0;
	OPERAND[0] = #20000 1'b1;
	OPERAND[0] = #20000 1'b0;
end 
endmodule

